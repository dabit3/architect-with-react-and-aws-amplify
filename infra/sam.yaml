AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@4.0.1 on 2020-11-20T20:58:41.849Z
Resources:
  HTTP:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
                connectionType: INTERNET
          /posts:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPosts.Arn}/invocations
                connectionType: INTERNET
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostPosts.Arn}/invocations
                connectionType: INTERNET
          /posts/{postID}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostsPostID.Arn}/invocations
                connectionType: INTERNET
            delete:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePostsPostID.Arn}/invocations
                connectionType: INTERNET
  GetIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://react-arc-cfn-deployments-70ddc/aed20c907f837deb536c254e080877d6
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: react-arc
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetIndexEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId:
              Ref: HTTP
  GetPosts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://react-arc-cfn-deployments-70ddc/03791338ca8f86acda457653d243c26a
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: react-arc
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetPostsEvent:
          Type: HttpApi
          Properties:
            Path: /posts
            Method: GET
            ApiId:
              Ref: HTTP
  GetPostsPostID:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://react-arc-cfn-deployments-70ddc/c13ddb8f1914ad377cdd5fa9f8df3bb9
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: react-arc
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetPostsPostIDEvent:
          Type: HttpApi
          Properties:
            Path: /posts/{postID}
            Method: GET
            ApiId:
              Ref: HTTP
  PostPosts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://react-arc-cfn-deployments-70ddc/02bb307421291312108b3a7cafe7e7a5
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: react-arc
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostPostsEvent:
          Type: HttpApi
          Properties:
            Path: /posts
            Method: POST
            ApiId:
              Ref: HTTP
  DeletePostsPostID:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://react-arc-cfn-deployments-70ddc/2a8b0b4d51e3556d03387d697b51273a
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: react-arc
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        DeletePostsPostIDEvent:
          Type: HttpApi
          Properties:
            Path: /posts/{postID}
            Method: DELETE
            ApiId:
              Ref: HTTP
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: postID
        KeyType: HASH
      AttributeDefinitions:
      - AttributeName: postID
        AttributeType: S
      - AttributeName: type
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: type-index
        KeySchema:
        - AttributeName: type
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcDynamoPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            Resource:
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: PostsTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: PostsTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/stream/*
              - tablename:
                  Ref: PostsTable
  PostsParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: posts
      Value:
        Ref: PostsTable
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ssm:GetParametersByPath
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
      Roles:
      - Ref: Role
Outputs:
  API:
    Description: API Gateway (HTTP)
    Value:
      Fn::Sub:
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com
      - ApiId:
          Ref: HTTP
  ApiId:
    Description: API ID (ApiId)
    Value:
      Ref: HTTP
